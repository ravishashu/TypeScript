#Componenets
Like most web frameworks, components in Angular allow you to define the HTML, JavaScript, and CSS styles for a page or a section of a page. 
Components can be as large as an entire web page, or they can just be one small part of a page or even as small as a single button, although that level of 
granularity is a little less common. In this module, you'll learn how to create simple custom components like this home page component. 

##Command to create a component: ng generate component Home

home.component.html - contains HTML
home.component.css - contains styes
home.component.ts - contains typescript file to handle the page life cycle events and other events
home.component.spec.ts - used for unit testing

files are created

##<app-home></app-home> tag is used to add component into a page

##In src\app\app.module.ts we have 
import { HomeComponent } from './home/home.component'; // which import the component
@NgModule({
  declarations: [
    AppComponent,
    HomeComponent -- adds the component
  ],

##Change Prefix:
Instead of calling <app-home></app-home> if you want to change it to <shop-home></shop-home>
Step 1
angular.json
"prefix": "shop",

Step 2
src\app\home\home.component.ts
selector: 'app-home' to selector: 'shop-home',

src\app\app.component.html
<app-home></app-home> to <shop-home></shop-home>

##Global styles are prestented in src\styles.css
########################################## Styling Components #####################################################################################
##Interpolation

Interpolation is used for one-way data binding in Angular. It embeds an expression into the HTML template. By default, expression should be surrounded by {{ and }}.

<p> 2 + 2 = {{ 2 + 2 }} </p> <!-- output: "2 + 2 = 4" -->
<p> 2 * 3 = {{ 2 * 3 }} </p> <!-- output:`"2 * 3 = 6" -->
<p> {{ “2 + 2 != ”+  2 + 2 }} </p> <!-- output:"2 + 2 != 22" -->
<p> {{ “2 + 2 = ”+  (2 + 2) }} </p> <!-- output:"2 + 2 = 4" -->

By adding {{}} you can bind a class from .ts class
example

export class HomeComponent {
  name = 'Wellcome to Angular Ravi';
}

And in HTML <h2 class="title">Hello {{expression }}</h2>

##Attribute Binding
To bind to an element's property, enclose it in square brackets, [], which identifies the property as a target property.
<img alt="item" [src]="itemImageUrl">

NgFor for example also provides access to the index of each hero in the array:
employees : any;
  
 
  constructor() {
    this.employees =[
      {id: 1, name: 'Ravi'},
      {id: 2, name: 'Raj'},
      {id: 3, name: 'Sam'},
    ] 
  }

<li *ngFor="let employee of employees">
  {{employee.id}} : {{employee.name}} <br/>
</li>
